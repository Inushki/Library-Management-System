import java.sql.*;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ayodhya Jithmini
 */
public class issue_book extends javax.swing.JFrame {

    /**
     * Creates new form issue_book
     */
    public issue_book() {
        initComponents();
        curDateTime();
    }
public void curDateTime(){
    DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy/MM/dd");
    LocalDateTime now = LocalDateTime.now();
    lblissueDate.setText(df.format(now));    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblissueDate = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblMemName = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblIRID = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jDueDate = new com.toedter.calendar.JDateChooser();
        cmbBID = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbMemID = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 255), 4));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel2.setText("Issue ID");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel3.setText("Book ID");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel4.setText("Member ID");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel5.setText("Member Name");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel6.setText("Book Title");

        lblissueDate.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblissueDate.setText("  ");

        lblTitle.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblTitle.setText("  ");

        lblMemName.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblMemName.setText("  ");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel10.setText("Issue Date");

        lblIRID.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblIRID.setText("  ");

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel12.setText("Due Date");

        cmbBID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cmbBID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECT--" }));
        cmbBID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBIDItemStateChanged(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update book 64.png"))); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erase new.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/close  new.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel7.setText("Cancel");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel8.setText("Update");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel9.setText("Clear");

        cmbMemID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cmbMemID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECT--" }));
        cmbMemID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMemIDItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel10))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jLabel9))
                    .addComponent(lblIRID, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbBID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel8))
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblissueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbMemID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(98, 98, 98)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMemName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblIRID))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(lblMemName)
                            .addComponent(cmbMemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(lblTitle)
                            .addComponent(cmbBID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblissueDate)
                                .addComponent(jLabel12))
                            .addComponent(jLabel10)))
                    .addComponent(jDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Issue Book");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    String SNo, IRID,avail;
    SimpleDateFormat duedate=new SimpleDateFormat("yyyy-MM-dd");
    
    private void loadBID(){
     try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        String getIDs="SELECT * FROM book WHERE Available='Yes';";
        Statement st=conn.createStatement();
        ResultSet ResID=st.executeQuery(getIDs);
        cmbBID.removeAllItems();
        cmbBID.addItem("--SELECT--");
        while(ResID.next()){
        cmbBID.addItem(ResID.getString("BID"));
        }
        }
        catch(Exception loadBErr){
            JOptionPane.showMessageDialog(this,"Error while loading Book ID  ..."+"/n"+loadBErr);
        }
    }
    
    private void loadMID(){
     try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        String getIDs="SELECT * FROM member;";
        Statement st=conn.createStatement();
        ResultSet ResID=st.executeQuery(getIDs);
        cmbMemID.removeAllItems();
        cmbMemID.addItem("--SELECT--");
        while(ResID.next()){
        cmbMemID.addItem(ResID.getString("MemID"));
        }
        }
        catch(Exception SearchErr){
            JOptionPane.showMessageDialog(this,"Error while loading Member ID..."+"/n"+SearchErr);
        }
    }
    
    private void NumGen(){
        try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        String queRows="SELECT COUNT(*) rowcount FROM issuereturn;";
        Statement st=conn.createStatement();
        ResultSet rs=st.executeQuery(queRows);
        rs.next();
        int NumRow=rs.getInt("rowcount");
        rs.close();
        
        if(NumRow>0){
            String getMax="SELECT MAX(serialno) FROM issuereturn;";
            Statement MaxNum=conn.createStatement();
            ResultSet maxS=MaxNum.executeQuery(getMax);
        if(maxS.next()){
            int maxSerial=Integer.parseInt(maxS.getString("MAX(serialno)"));
            maxSerial+=1;
            SNo=String.valueOf(maxSerial);
        }    
        }
        else{
            SNo="1";
        }
    IRID="IRID-"+SNo;
    lblIRID.setText(IRID);
    }
    catch(Exception myErr){
        JOptionPane.showMessageDialog(this,"Error while Number Generation..."+"\n"+myErr);
    }
    }
    
    //Creating a clear function with name of makanna to use multiple times in different events
    private void makanna(){
    lblIRID.setVisible(true);
    cmbMemID.setSelectedIndex(0);
    lblMemName.setVisible(true);
    cmbBID.setSelectedIndex(0);
    lblTitle.setVisible(true);
    lblissueDate.setVisible(false);
    jDueDate.setCalendar(null);
    loadMID();
    loadBID();
    NumGen();
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int resEx=JOptionPane.showConfirmDialog(null,"Are you sure, You want to Exit?","Confirm to Exit",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(resEx==0){
        this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        makanna();
    }//GEN-LAST:event_btnClearActionPerformed

    private void cmbBIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBIDItemStateChanged
        try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        if(cmbBID.getSelectedIndex()>0){
        String queData="SELECT * FROM book WHERE Available='Yes';";
        Statement stget=conn.createStatement();
        ResultSet data=stget.executeQuery(queData);
        
        if(data.next()){
        lblTitle.setText(data.getString("Title"));
        }
        }
        else{
        cmbBID.setVisible(true);
        lblTitle.setText("");
                }
        }
        catch(Exception Err){
             JOptionPane.showMessageDialog(this,"Error while loading Book ID..."+"\n"+Err);
        }
    }//GEN-LAST:event_cmbBIDItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadMID();
        loadBID();
        NumGen();
    }//GEN-LAST:event_formWindowOpened

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        String queCheck="SELECT COUNT(*) resCount FROM issuereturn WHERE MemID='"+cmbMemID.getSelectedItem()+"' AND Status='Issued';";
        Statement st=conn.createStatement();
        ResultSet rec=st.executeQuery(queCheck);
        rec.next();
        int NumRes=rec.getInt("resCount");
        rec.close();
        
        if(NumRes>0){
            JOptionPane.showMessageDialog(this,"Member ID: "+cmbMemID.getSelectedItem()+" has already borrowed a book from the library!"+"\n"+JOptionPane.ERROR_MESSAGE);
            cmbMemID.setSelectedIndex(0);
            lblMemName.setVisible(false);
            
        }
        else{
        String dd=duedate.format(jDueDate.getDate());
        String quesave="INSERT INTO issueReturn (issueReturnID,MemID,BookID,IssueDate,DueDate,Status) VALUES (?,?,?,?,?,?) ;";
        PreparedStatement cmd=conn.prepareStatement(quesave);
        cmd.setString(1,lblIRID.getText());
        cmd.setString(2,String.valueOf(cmbMemID.getSelectedItem()));
        cmd.setString(3,String.valueOf(cmbBID.getSelectedItem()));
        cmd.setString(4,lblissueDate.getText());
        cmd.setString(5,dd);
        cmd.setString(6,"Issued");
        String queUp="UPDATE book SET Available='No' WHERE BID='"+cmbBID.getSelectedItem()+"';";
        PreparedStatement cm=conn.prepareStatement(queUp);
        cmd.execute();
        cm.executeUpdate();
         
        JOptionPane.showMessageDialog(this,"Member: "+lblMemName.getText()+" borrowed Book: "+lblTitle.getText()+" is recorded successfully","UPDATED!",JOptionPane.INFORMATION_MESSAGE);
        makanna(); }
        }
        catch(Exception Err){
             JOptionPane.showMessageDialog(this,"Error while Save..."+"\n"+Err);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbMemIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMemIDItemStateChanged
        try{
        Class.forName("java.sql.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","");
        
        if(cmbMemID.getSelectedIndex()>0){
        String queData="SELECT * FROM member;";
        Statement stget=conn.createStatement();
        ResultSet data=stget.executeQuery(queData);
        
        if(data.next()){
        lblMemName.setText(data.getString("MemName"));
        }
                }
        else{
        cmbMemID.setVisible(true);
        lblMemName.setText("");
        }
        }
        catch(Exception Err){
             JOptionPane.showMessageDialog(this,"Error while loading Mmeber ID..."+"\n"+Err);
        }
    }//GEN-LAST:event_cmbMemIDItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(issue_book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(issue_book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(issue_book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(issue_book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new issue_book().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbBID;
    private javax.swing.JComboBox<String> cmbMemID;
    private com.toedter.calendar.JDateChooser jDueDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblIRID;
    private javax.swing.JLabel lblMemName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblissueDate;
    // End of variables declaration//GEN-END:variables
}
